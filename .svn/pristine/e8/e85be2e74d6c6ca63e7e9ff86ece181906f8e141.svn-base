//
//  AppDelegate.m
//  Ericsson
//
//  Created by 范传斌 on 15/9/28.
//  Copyright (c) 2015年 范传斌. All rights reserved.
//

#import "AppDelegate.h"
#import "UMSocial.h"
#import "BPush.h"
#import "MainViewController.h"
#import "ViewController.h"
#import "DelayStartViewController.h"
#import "AllAnnounceViewController.h"
#import "UnclosedSpareViewController.h"
#import "MyApplyListViewController.h"
#import "SpareAffirmViewController.h"
#import "HandlingOrderViewController.h"
#import "ConsumeSubmitListController.h"


//待上传附件
static NSString *MSGTYPE_ATTACH = @"0";
//新公告
static NSString *MSGTYPE_NEWANNOUNCE = @"1";
//费用上报审批
static NSString *MSGTYPE_FEEREPORTING = @"2";
//费用申请审批
static NSString *MSGTYPE_FEEAPPLY = @"3";
//工单步骤
static NSString *MSGTYPE_WORKORDERSTEP = @"4";
//安全响应
static NSString *MSGTYPE_SECURITY = @"5";
//备件申请状态
static NSString *MSGTYPE_SPAREAPPLY = @"6";
//耗材申请状态
static NSString *MSGTYPE_SUPPLIESAPPLY = @"7";
//备件出库
static NSString *MSGTYPE_RECEIVESPARE = @"8";
//耗材出库
static NSString *MSGTYPE_RECEIVESUPPLIES = @"9";
//工单关联的告警发生变化
static NSString *MSGTYPE_ALERTMODIFIED = @"10";
@interface AppDelegate ()
@property(nonatomic,strong)NSDictionary *userInfo;
@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [UMSocialData setAppKey:UMAPPKEY];

    
    //log日志
    [self redirectNSLogToDocumentFolder];
    
//    百度推送
    // iOS8 下需要使用新的 API
    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 8.0) {
        UIUserNotificationType myTypes = UIUserNotificationTypeBadge | UIUserNotificationTypeSound | UIUserNotificationTypeAlert;
        
        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:myTypes categories:nil];
        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];
    }else {
        UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeSound;
        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];
    }
    
#warning 测试 开发环境 时需要修改BPushMode为BPushModeDevelopment 需要修改Apikey为自己的Apikey
    
    // 在 App 启动时注册百度云推送服务，需要提供 Apikey
    [BPush registerChannel:launchOptions apiKey:YUNAPIKEY pushMode:BPushModeProduction withFirstAction:nil withSecondAction:nil withCategory:nil isDebug:YES];
    // App 是用户点击推送消息启动
    NSDictionary *userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (userInfo) {
        NSLog(@"从消息启动:%@",userInfo);
        [BPush handleNotification:userInfo];
    }
#if TARGET_IPHONE_SIMULATOR
    Byte dt[32] = {0xc6, 0x1e, 0x5a, 0x13, 0x2d, 0x04, 0x83, 0x82, 0x12, 0x4c, 0x26, 0xcd, 0x0c, 0x16, 0xf6, 0x7c, 0x74, 0x78, 0xb3, 0x5f, 0x6b, 0x37, 0x0a, 0x42, 0x4f, 0xe7, 0x97, 0xdc, 0x9f, 0x3a, 0x54, 0x10};
    [self application:application didRegisterForRemoteNotificationsWithDeviceToken:[NSData dataWithBytes:dt length:32]];
#endif
    //角标清0
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
    /*
     // 测试本地通知
     [self performSelector:@selector(testLocalNotifi) withObject:nil afterDelay:1.0];
     */
    return YES;
    
}
- (UIViewController *)getCurrentVC
{
    UIViewController *result = nil;
    
    UIWindow * window = [[UIApplication sharedApplication] keyWindow];
    if (window.windowLevel != UIWindowLevelNormal)
    {
        NSArray *windows = [[UIApplication sharedApplication] windows];
        for(UIWindow * tmpWin in windows)
        {
            if (tmpWin.windowLevel == UIWindowLevelNormal)
            {
                window = tmpWin;
                break;
            }
        }
    }
    
    UIView *frontView = [[window subviews] objectAtIndex:0];
    id nextResponder = [frontView nextResponder];
    
    if ([nextResponder isKindOfClass:[UIViewController class]])
        result = nextResponder;
    else
        result = window.rootViewController;
    
    return result;
}



- (UIViewController *)getPresentedViewController
{
    UIViewController *appRootVC = [UIApplication sharedApplication].keyWindow.rootViewController;
    UIViewController *topVC = appRootVC;
    if (topVC.presentedViewController) {
        topVC = topVC.presentedViewController;
    }
    
    return topVC;
}
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
    completionHandler(UIBackgroundFetchResultNewData);
    // 打印到日志 textView 中
    NSLog(@"********** iOS7.0之后 background **********");
    NSLog(@"%@",userInfo);
    self.userInfo = userInfo;
    // 应用在前台 或者后台开启状态下，不跳转页面，让用户选择。
    if (application.applicationState == UIApplicationStateActive) {
        NSLog(@"acitve or background");
        UIAlertView *alertView =[[UIAlertView alloc]initWithTitle:@"收到一条消息" message:userInfo[@"aps"][@"alert"] delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        [alertView show];
    }
    else//杀死状态下，直接跳转到跳转页面。
    {
        
        [self baiduSelection:userInfo];

        
    }
}
#pragma -mark- 百度推送判断
-(void)baiduSelection:(NSDictionary *)userInfo{
    NSString *str = [NSString stringWithFormat:@"%@",userInfo[@"msgType"]];
    UIViewController *currentVC = self.currentVC;
    if ([str isEqualToString:MSGTYPE_NEWANNOUNCE]) {   //新公告
    
        AllAnnounceViewController * vc = [[AllAnnounceViewController alloc]init];
        vc.navTitle = @"未读公告";
        vc.annoucneType = 2;
        if ([currentVC class] != [vc class] && currentVC.navigationController) {
            [currentVC.navigationController pushViewController:vc animated:YES];

            }
        }else if([str isEqualToString:MSGTYPE_WORKORDERSTEP]) //工单步骤
             {
                 HandlingOrderViewController *handlingOrders = [[HandlingOrderViewController alloc] init];
                 handlingOrders.searchWoType = 2;
                 if ([currentVC class] != [HandlingOrderViewController class] && currentVC.navigationController) {
                         [currentVC.navigationController pushViewController:handlingOrders animated:YES];
                 }
             
             }else if ([str isEqualToString:MSGTYPE_SECURITY]){ //安全相应
                 if ([currentVC class] != [ViewController class] && currentVC.navigationController) {
                     [currentVC.navigationController popToRootViewControllerAnimated:YES];
                 }
                 
             }else if ([str isEqualToString:MSGTYPE_SPAREAPPLY]){ //备件申请状态
                             UnclosedSpareViewController *unclosedspare = [[UnclosedSpareViewController alloc] initWithNibName:@"UnclosedSpareViewController" bundle:nil];
                             unclosedspare.navTitle = @"未关闭申请单";
                             unclosedspare.isColosed = @"1";
                             if ([currentVC class] != [unclosedspare class] && currentVC.navigationController ) {
                                 [currentVC.navigationController pushViewController:unclosedspare animated:YES];
                             }
                     
           }else if ([str isEqualToString:MSGTYPE_SUPPLIESAPPLY]){ //耗材申请状态
            MyApplyListViewController *vc=[[MyApplyListViewController alloc]init];
               if ([currentVC class] != [vc class] && currentVC.navigationController)       {
            [currentVC.navigationController pushViewController:vc animated:YES];
        }
        
        
       }else if([str isEqualToString:MSGTYPE_RECEIVESPARE]){ //备件出库
        SpareAffirmViewController *confirm = [[SpareAffirmViewController alloc] initWithNibName:@"SpareAffirmViewController" bundle:nil];
        if ([currentVC class] != [confirm class] && currentVC.navigationController) {
            [currentVC.navigationController pushViewController:confirm animated:YES];
           }
        
       }else if ([str isEqualToString:MSGTYPE_RECEIVESUPPLIES]){ //耗材出库
           ConsumeSubmitListController  *vc=[[ConsumeSubmitListController alloc]init];
           if ([currentVC class] != [vc class] && currentVC.navigationController) {
               [currentVC.navigationController pushViewController:vc animated:YES];
           }
           
       }
    

}
#pragma -mark- 百度推送具体步骤
// 在 iOS8 系统中，还需要添加这个方法。通过新的 API 注册推送服务
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
    
    [application registerForRemoteNotifications];
    
    
}


- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    NSLog(@"test:%@",deviceToken);
    [BPush registerDeviceToken:deviceToken];
       // 打印到日志 textView 中
//    [self.viewController addLogString:[NSString stringWithFormat:@"Register use deviceToken : %@",deviceToken]];
    
    
}

// 当 DeviceToken 获取失败时，系统会回调此方法
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    NSLog(@"DeviceToken 获取失败，原因：%@",error);
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    // App 收到推送的通知
    [BPush handleNotification:userInfo];
    NSLog(@"********** ios7.0之前 **********");
    // 应用在前台 或者后台开启状态下，不跳转页面，让用户选择。
    if (application.applicationState == UIApplicationStateActive || application.applicationState == UIApplicationStateBackground) {
        NSLog(@"acitve or background");
        UIAlertView *alertView =[[UIAlertView alloc]initWithTitle:@"收到一条消息" message:userInfo[@"aps"][@"alert"] delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        [alertView show];
    }
    else//杀死状态下，直接跳转到跳转页面。
    {
         [[NSNotificationCenter defaultCenter]postNotificationName:KBaiduTuisongNotification object:nil userInfo:userInfo];
//        SkipViewController *skipCtr = [[SkipViewController alloc]init];
//        [_tabBarCtr.selectedViewController pushViewController:skipCtr animated:YES];
    }
    
//    [self.viewController addLogString:[NSString stringWithFormat:@"Received Remote Notification :\n%@",userInfo]];
    
    NSLog(@"%@",userInfo);
}


- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
    NSLog(@"接收本地通知啦！！！");
    [BPush showLocalNotificationAtFront:notification identifierKey:nil];
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 1) {
        [self baiduSelection:self.userInfo];
            }
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}


#pragma mark - log
- (void)redirectNSLogToDocumentFolder
{
    //如果已经连接Xcode调试则不输出到文件
    if(isatty(STDOUT_FILENO)) {
        return;
    }
    
    UIDevice *device = [UIDevice currentDevice];
    if([[device model] hasSuffix:@"Simulator"]){ //在模拟器不保存到文件中
        return;
    }
    
    //将//NSLog打印信息保存到Document目录下的Log文件夹下
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *logDirectory = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"Log"];
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    BOOL fileExists = [fileManager fileExistsAtPath:logDirectory];
    if (!fileExists) {
        [fileManager createDirectoryAtPath:logDirectory  withIntermediateDirectories:YES attributes:nil error:nil];
    }
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@"zh_CN"]];
    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"]; //每次启动后都保存一个新的日志文件中
    NSString *dateStr = [formatter stringFromDate:[NSDate date]];
    NSString *logFilePath = [logDirectory stringByAppendingFormat:@"/%@.log",dateStr];
    
    // 将log输入到文件
    freopen([logFilePath cStringUsingEncoding:NSASCIIStringEncoding], "a+", stdout);
    freopen([logFilePath cStringUsingEncoding:NSASCIIStringEncoding], "a+", stderr);
    
    //未捕获的Objective-C异常日志
//    NSSetUncaughtExceptionHandler (&UncaughtExceptionHandler);
}

//void UncaughtExceptionHandler(NSException* exception)
//{
//    NSString* name = [ exception name ];
//    NSString* reason = [ exception reason ];
//    NSArray* symbols = [ exception callStackSymbols ]; // 异常发生时的调用栈
//    NSMutableString* strSymbols = [ [ NSMutableString alloc ] init ]; //将调用栈拼成输出日志的字符串
//    for ( NSString* item in symbols )
//    {
//        [ strSymbols appendString: item ];
//        [ strSymbols appendString: @"\r\n" ];
//    }
//    
//    //将crash日志保存到Document目录下的Log文件夹下
//    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
//    NSString *logDirectory = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"Log"];
//    
//    NSFileManager *fileManager = [NSFileManager defaultManager];
//    if (![fileManager fileExistsAtPath:logDirectory]) {
//        [fileManager createDirectoryAtPath:logDirectory  withIntermediateDirectories:YES attributes:nil error:nil];
//    }
//    
//    NSString *logFilePath = [logDirectory stringByAppendingPathComponent:@"UncaughtException.log"];
//    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
//    [formatter setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@"zh_CN"]];
//    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//    NSString *dateStr = [formatter stringFromDate:[NSDate date]];
//    
//    NSString *crashString = [NSString stringWithFormat:@"<- %@ ->[ Uncaught Exception ]\r\nName: %@, Reason: %@\r\n[ Fe Symbols Start ]\r\n%@[ Fe Symbols End ]\r\n\r\n", dateStr, name, reason, strSymbols];
//    //把错误日志写到文件中
//    if (![fileManager fileExistsAtPath:logFilePath]) {
//        [crashString writeToFile:logFilePath atomically:YES encoding:NSUTF8StringEncoding error:nil];
//    }else{
//        NSFileHandle *outFile = [NSFileHandle fileHandleForWritingAtPath:logFilePath];
//        [outFile seekToEndOfFile];
//        [outFile writeData:[crashString dataUsingEncoding:NSUTF8StringEncoding]];
//        [outFile closeFile];
//    }
//    
//    //把错误日志发送到邮箱
//    //    NSString *urlStr = [NSString stringWithFormat:@"mailto://test@163.com?subject=bug报告&body=感谢您的配合!
//    
//    
//    // 错误详情:
//    //%@",crashString ];
//    //    NSURL *url = [NSURL URLWithString:[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
//    //    [[UIApplication sharedApplication] openURL:url];
//}

@end
